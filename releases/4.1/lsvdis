#!/bin/bash
#!/bin/bash

# Shows virtual disk information
# Authors: Lisa Nguyen (ltn821@hotmail.com), Grant McWilliams (grantmcwilliams.com)
# Version: 0.5
# Date: 9/10/2012 
# Version: 0.6
# Date: 12/20/2012
# Rewrote to xenapi admin tools 4.0 spec
# Version: 0.7
# Date: 01/21/13
# Rewrote to xenapi admin tools 4.1 spec

setup()
{
	SCRIPTDIR=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))
	source "$SCRIPTDIR/xaptools.lib" 
	setcolors	
	DEFSPACE="3"
	MINSPACE="$DEFSPACE"
	MODE="mixed"
	ORDER="vdi"
	VERSION="0.7"
}

syntax()
{
		echo "$(basename $0) $VERSION"
        echo ""
        echo "	Syntax: $(basename $0) [options]"
        echo "	Options:"
        echo "	-d - shell debugging"
        echo "	-c - output comma seperated values"
        echo "	-u - shows VDI UUID, Size, SR UUID, SR type, VM UUID and VM device"
		echo "	-n - shows VDI Name, Size, SR Name, SR type, VM Name and VM device"
        echo "	-m - shows VDI UUID, Size, SR Name, SR type, VM Name and VM device"
        echo "	-o <value> - changes sort order by column, value can be vdi, size, sr, vm or device"
        echo "	-s <host> - remote poolmaster host"
        echo "	-p <password> - remote poolmaster password"
        echo "	-h - this help text"
        echo "	-w - number of whitespaces between columns"
        echo ""
        exit
}

getvdidata()
{
	getcmddata vdi-list params=uuid,name-label,sr-uuid,sr-name-label,virtual-size
	getcmddata vbd-list currently-attached=false params=uuid,vm-uuid,vm-name-label,vdi-uuid,userdevice
	getcmddata sr-list params=uuid,type

	IFS=$'\n'
	for i in $(seq 0 $(( ${#vdi_uuid[@]} - 1 )) ) ;do
		for j in $(seq 0 $(( ${#sr_uuid[@]} - 1 )) ) ;do
			case "${sr_uuid[$j]}" in
				"${vdi_sr_uuid[$i]}") vdi_sr_type[$i]="${sr_type[$j]}" ;break ;;
				*) vdi_sr_type[$i]="-" ;;
			esac
		done
		for j in $(seq 0 $(( ${#vbd_uuid[@]} - 1 )) ) ;do
			case "${vbd_vdi_uuid[$j]}" in 
				"${vdi_uuid[$i]}" )
					vdi_vm_uuid[$i]="${vbd_vm_uuid[$j]}"
					vdi_vm_name_label[$i]="${vbd_vm_name_label[$j]}"
					vdi_userdevice[$i]="${vbd_userdevice[$j]}"
					break
				;;
				*)  vdi_vm_uuid[$i]="-"
					vdi_vm_name_label[$i]="-"
					vdi_userdevice[$i]="-"
				;;
			esac
		done
		vdi_virtual_size[$i]=$(getunit ${vdi_virtual_size[$i]})
	done
}

setup 
while getopts :dcubnmhw:s:o:p: opt ;do
        case $opt in
                d) set -x ;;
                h) syntax ;;
                c) CSV="yes" ;;
                u) MODE="uuid" ;;
                m) MODE="mixed" ;;
                n) MODE="name" ;;
                o) ORDER="$OPTARG" ;;
                s) REMOTE="yes" ; POOLMASTER="$OPTARG" ;;
                p) PASSWORD="$OPTARG" ;;
                w) isnumber "$OPTARG" && MINSPACE="$OPTARG" ;;
                \?) echo "Unknown option"; syntax ;;
        esac
done
shift $(($OPTIND - 1))
getpoolcreds
getvdidata

case "$ORDER" in 
	"vdi")    	fsort_arrays vdi_uuid vdi_name_label vdi_sr_uuid vdi_sr_name_label vdi_sr_type vdi_virtual_size vdi_vm_uuid vdi_vm_name_label vdi_userdevice ;;
	"size")   	fsort_arrays vdi_virtual_size vdi_uuid vdi_name_label vdi_sr_uuid vdi_sr_name_label vdi_sr_type  vdi_vm_uuid vdi_vm_name_label vdi_userdevice ;;
	"sr") 		fsort_arrays vdi_sr_uuid vdi_virtual_size vdi_uuid vdi_name_label vdi_sr_name_label vdi_sr_type  vdi_vm_uuid vdi_vm_name_label vdi_userdevice ;;
	"vm") 		fsort_arrays vdi_vm_uuid vdi_sr_uuid vdi_virtual_size vdi_uuid vdi_name_label vdi_sr_name_label vdi_sr_type vdi_vm_name_label vdi_userdevice ;;
	"device") 	fsort_arrays vdi_userdevice vdi_vm_uuid vdi_sr_uuid vdi_virtual_size vdi_uuid vdi_name_label vdi_sr_name_label vdi_sr_type vdi_vm_name_label ;;
esac

case "$MODE" in
	"uuid")   
		TITLES=( 'VDI UUID' 'Size' 'SR UUID' 'Type' 'VM UUID' 'Dev' ) 
		COLLONGEST[0]=$(getcolwidth "${TITLES[0]}" "${vdi_uuid[@]}")
		COLLONGEST[1]=$(getcolwidth "${TITLES[1]}" "${vdi_virtual_size[@]}")
		COLLONGEST[2]=$(getcolwidth "${TITLES[2]}" "${vdi_sr_uuid[@]}")
		COLLONGEST[3]=$(getcolwidth "${TITLES[3]}" "${vdi_sr_type[@]}")
		COLLONGEST[4]=$(getcolwidth "${TITLES[4]}" "${vdi_vm_uuid[@]}")
		COLLONGEST[5]=$(getcolwidth "${TITLES[5]}" "${vdi_userdevice[@]}")
	;;
   "mixed")   
		TITLES=( 'VDI UUID' 'Size' 'SR Name' 'SR Type' 'VM Name' 'Dev' ) 
		COLLONGEST[0]=$(getcolwidth "${TITLES[0]}" "${vdi_uuid[@]}")
		COLLONGEST[1]=$(getcolwidth "${TITLES[1]}" "${vdi_virtual_size[@]}")
		COLLONGEST[2]=$(getcolwidth "${TITLES[2]}" "${vdi_sr_name_label[@]}")
		COLLONGEST[3]=$(getcolwidth "${TITLES[3]}" "${vdi_sr_type[@]}")
		COLLONGEST[4]=$(getcolwidth "${TITLES[4]}" "${vdi_vm_name_label[@]}")
		COLLONGEST[5]=$(getcolwidth "${TITLES[5]}" "${vdi_userdevice[@]}")
	;;
	"name")   
		TITLES=( 'VDI Name' 'Size' 'SR Name' 'SR Type' 'VM Name' 'Dev' ) 
		COLLONGEST[0]=$(getcolwidth "${TITLES[0]}" "${vdi_uuid[@]}")
		COLLONGEST[1]=$(getcolwidth "${TITLES[1]}" "${vdi_virtual_size[@]}")
		COLLONGEST[2]=$(getcolwidth "${TITLES[2]}" "${vdi_sr_name_label[@]}")
		COLLONGEST[3]=$(getcolwidth "${TITLES[3]}" "${vdi_sr_type[@]}")
		COLLONGEST[4]=$(getcolwidth "${TITLES[4]}" "${vdi_vm_name_label[@]}")
		COLLONGEST[5]=$(getcolwidth "${TITLES[5]}" "${vdi_userdevice[@]}")
	;;
esac


# Print column headings and data columns
printheadings
for i in $(seq 0 $(( ${#vdi_uuid[@]} - 1 )) ) ;do
	case "$MODE" in
		"uuid")  cecho "${vdi_uuid[$i]}" cyan 			;printspaces "${COLLONGEST[0]}" "${#vdi_uuid[$i]}" 
				 cecho "${vdi_virtual_size[$i]}" cyan   ;printspaces "${COLLONGEST[1]}" "${#vdi_virtual_size[$i]}" 
				 cecho "${vdi_sr_uuid[$i]}" cyan      	;printspaces "${COLLONGEST[2]}" "${#vdi_sr_uuid[$i]}" 
				 cecho "${vdi_sr_type[$i]}" cyan      	;printspaces "${COLLONGEST[3]}" "${#vdi_sr_type[$i]}" 
				 cecho "${vdi_vm_uuid[$i]}" cyan      	;printspaces "${COLLONGEST[4]}" "${#vdi_vm_uuid[$i]}" 
				 cecho "${vdi_userdevice[$i]}" cyan
		;;
		"mixed") cecho "${vdi_uuid[$i]}" cyan 			;printspaces "${COLLONGEST[0]}" "${#vdi_uuid[$i]}" 
				 cecho "${vdi_virtual_size[$i]}" cyan   ;printspaces "${COLLONGEST[1]}" "${#vdi_virtual_size[$i]}" 
				 cecho "${vdi_sr_name_label[$i]}"  cyan ;printspaces "${COLLONGEST[2]}" "${#vdi_sr_name_label[$i]}" 
				 cecho "${vdi_sr_type[$i]}"  cyan      	;printspaces "${COLLONGEST[3]}" "${#vdi_sr_type[$i]}" 
				 cecho "${vdi_vm_name_label[$i]}"  cyan ;printspaces "${COLLONGEST[4]}" "${#vdi_vm_name_label[$i]}" 
				 cecho "${vdi_userdevice[$i]}"   cyan
		;;
		"name")  cecho "${vdi_name_label[$i]}" cyan 	;printspaces "${COLLONGEST[0]}" "${#vdi_name_label[$i]}" 
				 cecho "${vdi_virtual_size[$i]}" cyan   ;printspaces "${COLLONGEST[1]}" "${#vdi_virtual_size[$i]}" 
				 cecho "${vdi_sr_name_label[$i]}"  cyan ;printspaces "${COLLONGEST[2]}" "${#vdi_sr_name_label[$i]}" 
				 cecho "${vdi_sr_type[$i]}"  cyan      	;printspaces "${COLLONGEST[3]}" "${#vdi_sr_type[$i]}" 
				 cecho "${vdi_vm_name_label[$i]}"  cyan ;printspaces "${COLLONGEST[4]}" "${#vdi_vm_name_label[$i]}" 
				 cecho "${vdi_userdevice[$i]}"  cyan
		;;
	esac  
	echo ""   
done
